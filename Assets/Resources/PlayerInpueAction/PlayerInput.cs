//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/PlayerInpueAction/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""cbb70594-e052-4310-b0b0-17f6f2006645"",
            ""actions"": [
                {
                    ""name"": ""LeftMove"",
                    ""type"": ""Button"",
                    ""id"": ""7630fc5b-69a5-491d-98bf-802acfc7ecce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMove"",
                    ""type"": ""Button"",
                    ""id"": ""4c8fe86f-4161-4758-8fe6-3119fd10e215"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpMove"",
                    ""type"": ""Button"",
                    ""id"": ""5bf4ba6d-d292-4cd6-9205-7de36463bc12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownMove"",
                    ""type"": ""Button"",
                    ""id"": ""2d22f4d3-d771-49a2-ab0c-b9a5cd1cf5a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftColoration"",
                    ""type"": ""Button"",
                    ""id"": ""d1ace1c5-ea94-4255-a5f4-c1cce8ed5221"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightColoration"",
                    ""type"": ""Button"",
                    ""id"": ""ec40a1c8-6633-46c3-ae8f-684b76ac6d43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpColoration"",
                    ""type"": ""Button"",
                    ""id"": ""cf73d4a7-5de7-4b12-9755-66253db69d96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownColoration"",
                    ""type"": ""Button"",
                    ""id"": ""f79fe613-9b17-400a-a78f-9b81f72f711b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""347a20fe-d8f0-4110-b086-61a0903b135e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ebe72e5-744c-487c-8424-c31c1d93240b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59431d88-fd4d-4bce-8a32-8d2b008e646d"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""239c7892-b8c5-431a-9e76-98726f10868c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e0b002-eaea-4cd6-8661-cc8ac590f851"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6b10a72-8d20-483d-8ac8-fdc29f398422"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c6fded-c425-4c8e-bcc6-d9038930ab65"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd143b40-4563-46fc-8873-5756b895584d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec260df4-d317-4b3b-b96c-9da4b9067810"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96583232-c33f-4b56-ac93-84903a6b21d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""061b8b6a-bd45-4d3d-81bd-53c001a0edce"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d5d407f-c610-4577-8190-a65bc54829b9"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aaba620-95f1-4123-9b7c-ff2241b0d6b2"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbaf2333-54a6-414a-af54-e58847fb3e72"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d624a82b-9e0a-4e77-b890-fc45c6c9cb26"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5310f460-07df-4538-9178-bfdd92083d9e"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""547eb0b6-13c3-4def-a87d-e6ffae6d1dc9"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f89bdb8-2e7a-4d19-b4eb-18ddad4e3f8f"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b78df123-5eb0-4ba3-acc9-efa0f0059851"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55f2c6c8-ea79-4316-946a-53d25a1621bd"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7f8024a-5f19-47e2-90d4-05f45e014bef"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c945165c-df67-44f0-b1b3-489dbb4e0c1a"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8f7b55f-cb12-4fb7-97ea-2bf8ff4e49f1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fcd0f2f-ef68-4034-9ad6-36cc0bbaded7"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownColoration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""17014657-5fa5-4a1a-a16e-3ad14fb0e332"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""db5a3ef6-c041-4810-8475-19f4a0d2eedb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07e09339-4842-4f45-97dd-f02ca864e8a7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_LeftMove = m_GamePlay.FindAction("LeftMove", throwIfNotFound: true);
        m_GamePlay_RightMove = m_GamePlay.FindAction("RightMove", throwIfNotFound: true);
        m_GamePlay_UpMove = m_GamePlay.FindAction("UpMove", throwIfNotFound: true);
        m_GamePlay_DownMove = m_GamePlay.FindAction("DownMove", throwIfNotFound: true);
        m_GamePlay_LeftColoration = m_GamePlay.FindAction("LeftColoration", throwIfNotFound: true);
        m_GamePlay_RightColoration = m_GamePlay.FindAction("RightColoration", throwIfNotFound: true);
        m_GamePlay_UpColoration = m_GamePlay.FindAction("UpColoration", throwIfNotFound: true);
        m_GamePlay_DownColoration = m_GamePlay.FindAction("DownColoration", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_LeftMove;
    private readonly InputAction m_GamePlay_RightMove;
    private readonly InputAction m_GamePlay_UpMove;
    private readonly InputAction m_GamePlay_DownMove;
    private readonly InputAction m_GamePlay_LeftColoration;
    private readonly InputAction m_GamePlay_RightColoration;
    private readonly InputAction m_GamePlay_UpColoration;
    private readonly InputAction m_GamePlay_DownColoration;
    public struct GamePlayActions
    {
        private @PlayerInput m_Wrapper;
        public GamePlayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMove => m_Wrapper.m_GamePlay_LeftMove;
        public InputAction @RightMove => m_Wrapper.m_GamePlay_RightMove;
        public InputAction @UpMove => m_Wrapper.m_GamePlay_UpMove;
        public InputAction @DownMove => m_Wrapper.m_GamePlay_DownMove;
        public InputAction @LeftColoration => m_Wrapper.m_GamePlay_LeftColoration;
        public InputAction @RightColoration => m_Wrapper.m_GamePlay_RightColoration;
        public InputAction @UpColoration => m_Wrapper.m_GamePlay_UpColoration;
        public InputAction @DownColoration => m_Wrapper.m_GamePlay_DownColoration;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @LeftMove.started += instance.OnLeftMove;
            @LeftMove.performed += instance.OnLeftMove;
            @LeftMove.canceled += instance.OnLeftMove;
            @RightMove.started += instance.OnRightMove;
            @RightMove.performed += instance.OnRightMove;
            @RightMove.canceled += instance.OnRightMove;
            @UpMove.started += instance.OnUpMove;
            @UpMove.performed += instance.OnUpMove;
            @UpMove.canceled += instance.OnUpMove;
            @DownMove.started += instance.OnDownMove;
            @DownMove.performed += instance.OnDownMove;
            @DownMove.canceled += instance.OnDownMove;
            @LeftColoration.started += instance.OnLeftColoration;
            @LeftColoration.performed += instance.OnLeftColoration;
            @LeftColoration.canceled += instance.OnLeftColoration;
            @RightColoration.started += instance.OnRightColoration;
            @RightColoration.performed += instance.OnRightColoration;
            @RightColoration.canceled += instance.OnRightColoration;
            @UpColoration.started += instance.OnUpColoration;
            @UpColoration.performed += instance.OnUpColoration;
            @UpColoration.canceled += instance.OnUpColoration;
            @DownColoration.started += instance.OnDownColoration;
            @DownColoration.performed += instance.OnDownColoration;
            @DownColoration.canceled += instance.OnDownColoration;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @LeftMove.started -= instance.OnLeftMove;
            @LeftMove.performed -= instance.OnLeftMove;
            @LeftMove.canceled -= instance.OnLeftMove;
            @RightMove.started -= instance.OnRightMove;
            @RightMove.performed -= instance.OnRightMove;
            @RightMove.canceled -= instance.OnRightMove;
            @UpMove.started -= instance.OnUpMove;
            @UpMove.performed -= instance.OnUpMove;
            @UpMove.canceled -= instance.OnUpMove;
            @DownMove.started -= instance.OnDownMove;
            @DownMove.performed -= instance.OnDownMove;
            @DownMove.canceled -= instance.OnDownMove;
            @LeftColoration.started -= instance.OnLeftColoration;
            @LeftColoration.performed -= instance.OnLeftColoration;
            @LeftColoration.canceled -= instance.OnLeftColoration;
            @RightColoration.started -= instance.OnRightColoration;
            @RightColoration.performed -= instance.OnRightColoration;
            @RightColoration.canceled -= instance.OnRightColoration;
            @UpColoration.started -= instance.OnUpColoration;
            @UpColoration.performed -= instance.OnUpColoration;
            @UpColoration.canceled -= instance.OnUpColoration;
            @DownColoration.started -= instance.OnDownColoration;
            @DownColoration.performed -= instance.OnDownColoration;
            @DownColoration.canceled -= instance.OnDownColoration;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGamePlayActions
    {
        void OnLeftMove(InputAction.CallbackContext context);
        void OnRightMove(InputAction.CallbackContext context);
        void OnUpMove(InputAction.CallbackContext context);
        void OnDownMove(InputAction.CallbackContext context);
        void OnLeftColoration(InputAction.CallbackContext context);
        void OnRightColoration(InputAction.CallbackContext context);
        void OnUpColoration(InputAction.CallbackContext context);
        void OnDownColoration(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
